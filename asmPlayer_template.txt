;Fami2Vic player for Expanded (8k) VIC-20


; 10 SYS (4645)

*=$1201

        BYTE    $0E, $12, $0A, $00, $9E, $20, $28,  $34, $36, $34, $35, $29, $00, $00, $00




*=$1225

defm    mPrint
        LDA #/1
        JSR PRINT_CHAR
        endm



defm    PrintValue
                TAX
                LDA #$00
                JSR $DDCD
                LDX #0
                endm

defm    PrintHex ; print hex value to a screen location
        pha
        lsr
        lsr
        lsr
        lsr
        tax
        lda convtable,x
        sta /1
        pla
        and #$0f
        tax
        lda convtable,x
        sta /2
        LDX #0
        endm


start   
        LDA numloopsconst
        STA numloops

        LDA 60900
        CMP #12 ; 5=NTSC, 12=PAL
        BEQ LoadPALSpeed
        LDA NTSCSpeed
        STA Tempo
        STA TempoConst
        JMP AfterTempo
LoadPALSpeed
        LDA PALSpeed
        STA Tempo
        STA TempoConst

AfterTempo
        LDX #0

load10bitofr
        LDA 10bitofr,x
        STA 832,x
        INX
        TXA
        CMP #84
        BNE load10bitofr
        JSR 832

loopstart
        LDA #10 ; set volume
        STA VOLUME ; store volume

        LDA s3addrlowlist
        STA s3addrlow
        LDA s3addrhighlist
        STA s3addrhigh
        LDA s2addrlowlist
        STA s2addrlow
        LDA s2addrhighlist
        STA s2addrhigh
        LDA s1addrhighlist
        STA s1addrhigh
        LDA s1addrlowlist
        STA s1addrlow
        LDA n4addrhighlist
        STA n4addrhigh
        LDA n4addrlowlist
        STA n4addrlow

        LDA #1
        STA ByteOne
        STA s3request
        STA s2request
        STA s1request
        STA n4request        

        LDX #0
        JSR hprint
        LDA numloops
        PrintHex 4253,4254
        
        
        

soundloop

        LDY #1
        CPY s3request
        BEQ s3requesthelp
        CPY s2request
        BEQ s2requesthelp
        CPY s1request
        BEQ s1requesthelp
        CPY n4request
        BEQ n4requesthelp
        JMP sounddelaysetup

s1requesthelp
        JMP s1requestnote
s2requesthelp
        JMP s2requestnote
s3requesthelp
        JMP s3requestnote
n4requesthelp
        JMP n4requestnote
        
; -------------- S3 Note Request ---------;
s3requestnote
        LDA s3addrhigh          ;load in current note index
        STA AddrHigh
        LDA s3addrlow           ; load in current note index
        STA AddrLow 
        LDA ($AC,x)             ;load in s3 note

        CMP #99                 ;if 99 then jump to new pattern request subroutine
        BNE skipnewpatternreq   ;if not 99 then skip the JSR and load in the next note data

newpatternreq
        ;mPrint 42
        INC patterncounter
        LDX patterncounter

        LDA s3addrhighlist,x
        STA s3addrhigh
        LDA s3addrlowlist,x
        STA s3addrlow
        LDA s2addrhighlist,x
        STA s2addrhigh
        LDA s2addrlowlist,x
        STA s2addrlow
        LDA s1addrhighlist,x
        STA s1addrhigh
        LDA s1addrlowlist,x
        STA s1addrlow
        LDA n4addrhighlist,x
        STA n4addrhigh
        LDA n4addrlowlist,x
        STA n4addrlow 

        LDA s3addrhigh
        CMP #80
        BEQ exithelp

        LDX #0
        LDA s3addrhigh ; reload in the first s3 note, since the old code was 99
        STA AddrHigh
        LDA s3addrlow 
        STA AddrLow 
        LDA ($AC,x)

skipnewpatternreq
        TAX
        JSR LoadToneLow
        STA s3tonelow
        JSR LoadToneHigh
        STA s3tonehigh
        LDX #0


        LDA $AC      ;check AddrLow to see if it's about to overflow
        CMP #255
        BEQ s3inc1
        INC $AC
        JMP s3requestdur

exithelp
        JMP incexit

s3inc1   
        JSR incaddr    

        
s3requestdur

        LDA ($AC,x)
        STA s3duration

        LDA $AC
        CMP #255
        BEQ s3inc2
        INC $AC
        JMP s3saveaddr
        
s3inc2
       JSR incaddr

s3saveaddr
        LDA AddrLow
        STA s3addrlow
        LDA AddrHigh
        STA s3addrhigh
        LDA #0
        STA s3request
        STA s3loopcount

        LDY #1
        CPY s2request
        BEQ s2requestnote
        CPY s1request
        BEQ s1requestnote
        CPY n4request
        BEQ n4requesthelp2
        JMP loadsound

n4requesthelp2
        JMP n4requestnote


; -------------- S2 Note Request ---------;

s2requestnote
        LDA s2addrhigh ;load in current note index
        STA AddrHigh
        LDA s2addrlow ; load in current note index
        STA AddrLow 
        LDA ($AC,x) ;load in s2 note

        TAX
        JSR LoadToneLow
        STA s2tonelow
        JSR LoadToneHigh
        STA s2tonehigh
        LDX #0


        LDA $AC      ;check AddrLow to see if it's about to overflow
        CMP #255
        BEQ s2inc1
        INC $AC
        JMP s2requestdur

s2inc1
       JSR incaddr   
        
s2requestdur

        LDA ($AC,x)
        STA s2duration

        LDA $AC
        CMP #255
        BEQ s2inc2
        INC $AC
        JMP s2saveaddr
        
s2inc2
       JSR incaddr

s2saveaddr
        LDA AddrLow
        STA s2addrlow
        LDA AddrHigh
        STA s2addrhigh
        LDA #0
        STA s2request
        STA s2loopcount

        LDA #1
        CMP s1request
        BEQ s1requestnote
        CMP n4request
        BEQ n4requestnote
        JMP loadsound

; -------------- s1 Note Request ---------;
s1requestnote
        LDA s1addrhigh ;load in current note index
        STA AddrHigh
        LDA s1addrlow ; load in current note index
        STA AddrLow 
        LDA ($AC,x) ;load in s1 note

        TAX
        JSR LoadToneLow
        STA s1tonelow
        JSR LoadToneHigh
        STA s1tonehigh
        LDX #0


        LDA $AC      ;check AddrLow to see if it's about to overflow
        CMP #255
        BEQ s1inc1
        INC $AC
        JMP s1requestdur

s1inc1
       JSR incaddr  
        
s1requestdur

        LDA ($AC,x)
        STA s1duration

        LDA $AC
        CMP #255
        BEQ s1inc2
        INC $AC
        JMP s1saveaddr
        
s1inc2
       JSR incaddr

s1saveaddr
        LDA AddrLow
        STA s1addrlow
        LDA AddrHigh
        STA s1addrhigh
        LDA #0
        STA s1request
        STA s1loopcount

        LDA #1
        CMP n4request
        BEQ n4requestnote
        JMP loadsound


; -------------- n4 Note Request ---------;
n4requestnote
        LDA n4addrhigh ;load in current note index
        STA AddrHigh
        LDA n4addrlow ; load in current note index
        STA AddrLow 
        LDA ($AC,x) ;load in n4 note
        STA n4tonelow


        LDA $AC      ;check AddrLow to see if it's about to overflow
        CMP #255
        BEQ n4inc1
        INC $AC
        JMP n4requestdur

n4inc1
       LDA #0
       STA $AC
       INC $AD    
        
n4requestdur

        LDA ($AC,x)
        STA n4duration

        LDA $AC
        CMP #255
        BEQ n4inc3
        INC $AC

        JMP n4saveaddr
        
n4inc3
       LDA #0
       STA $AC
       INC $AD

n4saveaddr
        LDA AddrLow
        STA n4addrlow
        LDA AddrHigh
        STA n4addrhigh
        LDA #0
        STA n4request
        STA n4loopcount



; ---------- load sound --------- ;

loadsound
        LDA SwapS2S3
        CMP #1
        BEQ loadsoundswap
        
        LDA s3tonelow
        STA S31
        STA 4098

        LDA s3tonehigh
        STA s32
        STA 37890

        LDA s2tonelow
        STA S21
        STA 4097
        LDA s2tonehigh
        STA S22
        STA 37889
        JMP afterswap

loadsoundswap
        LDA s2tonelow
        STA S31
        STA 4098

        LDA s2tonehigh
        STA s32
        STA 37890

        LDA s3tonelow
        STA S21
        STA 4097
        LDA s3tonehigh
        STA S22
        STA 37889

afterswap

        LDA s1tonelow
        STA S11
        STA 4096
        LDA s1tonehigh
        STA S12
        STA 37888

        LDA n4tonelow
        STA N4
        STA 37891
        STA 4099


        ;LDA 36879
        ;AND 78
        ;ORA S32
        ;STA 36879

; ---------- sound delay loop --------- ;
      
sounddelaysetup
        LDA #0
        STA sounddelayhighbyte
 

sounddelaylowsetup
        LDA #0
        STA sounddelaylowbyte

sounddelaylow

        ;JSR pwmcheck
       
        LDA sounddelaylowbyte

        CMP Tempo



        BEQ sounddelayhigh
        INC sounddelaylowbyte
        JMP sounddelaylow

sounddelayhigh
        

displayinfo

        LDA s1tonelow
        PrintHex 4143,4144
        LDA s1tonehigh
        PrintHex 4146,4147

        LDA s2tonelow
        PrintHex 4165,4166
        LDA s2tonehigh
        PrintHex 4168,4169

        LDA s3tonelow
        PrintHex 4187,4188
        LDA s3tonehigh
        PrintHex 4190,4191

        LDA n4tonelow
        PrintHex 4209,4210

        LDA patterncounter
        PrintHex 4231,4232


        LDA #0
        STA sounddelaylowbyte
        ;STA n4
        ;STA n4tonelow


        LDA sounddelayhighbyte
        CMP SpeedHighByte
        BEQ sounddelayloop
        INC sounddelayhighbyte
        JMP sounddelaylow

        

sounddelayloop                  ; used for duration counter
        LDA #0
        STA sounddelayhighbyte
        STA sounddelaylowbyte
        STA 37141               ; the "quality" register for 10-bit-ofr

; ---------- S3 check for new note --------- ;
s3newnotecheck
        LDA s3loopcount
        CMP s3duration
        BEQ s3newnote
        INC s3loopcount
        JMP s2newnotecheck ; goto check to see if S2 needs a new note

; ---------- S3 new note found, latch request --------- ;
s3newnote
        LDA #1
        STA s3request

; ---------- S2 check for new note --------- ;
s2newnotecheck
        LDA s2loopcount
        CMP s2duration
        BEQ s2newnote
        INC s2loopcount
        JMP s1newnotecheck

; ---------- S2 new note found, latch request --------- ;
s2newnote
        LDA #1
        STA s2request


; ---------- S1 check for new note --------- ;
s1newnotecheck
        LDA s1loopcount
        CMP s1duration
        BEQ s1newnote
        INC s1loopcount
        JMP n4mutecheck

; ---------- S1 new note found, latch request --------- ;
s1newnote
        LDA #1
        STA s1request

;     Noise Channel Mute     ;  - Mute after X loops without reseting note duration counter
n4mutecheck                  ; - This makes the noise sound more like drums would
        LDA n4loopcount
        CMP #1
        BEQ n4mute
        JMP n4newnotecheck

n4mute
        LDA #0
        STA N4          ; send 0 to noise voice register
        STA 4099        ; send 0 to noise indicator on the screen
        STA n4tonelow

n4newnotecheck
        LDA n4loopcount
        CMP n4duration
        BEQ n4newnote
        INC n4loopcount
        JMP frameinc

n4newnote
        LDA #1
        STA n4request

; Change frame state every 40 loops ;        
frameinc
        LDA framecount
        CMP frameinterval
        BEQ frametest
        INC framecount

endofloop
        LDA 197 ; current key
        CMP #64
        BNE keycheck ; check inputs for quitting, skipping next, etc.
afterkeycheck
        LDA 197
        STA keypressold
        LDA TempoConst
        STA Tempo
        JMP soundloop

frametest
        
       JMP fadeout 
fadetest
       LDA #0
       STA framecount
       LDA framestate        ; if framestate=0 then goto frame0
       CMP #0
       BEQ frame0 
frame1

        LDA #0
        STA framestate
        JMP soundloop

frame0

        LDA #1
        STA framestate
        JMP soundloop

keycheck
        CMP #48 ;Q
        BEQ keyquit
        CMP #28 ;N
        BEQ keynext
        CMP #35 ;B
        BEQ keyrev
        CMP #42 ;F       
        BEQ keyfast
        CMP #10 ;R
        BEQ keyback
        CMP #5 ;+
        BEQ keyloopup
        CMP #61 ;-
        BEQ keyloopdown

        JMP soundloop
keyquit
        LDA #99
        STA CURRENTSONG
        LDA #0
        STA numloops
        JMP exit
keynext
        LDA #0
        STA numloops
        JMP incexit
keyrev 
        LDA #0
        STA numloops
        JMP decexit
keyfast
        LDA #1
        STA Tempo
        JMP soundloop
keyback
        LDA keypressold
        CMP #64
        BNE afterkeycheckhelp
        DEC patterncounter
        JMP afterkeycheck
keyloopup
        LDA keypressold
        CMP #64
        BNE afterkeycheckhelp
        INC numloops
        LDA numloops
        PrintHex 4253,4254
        JMP afterkeycheck

keyloopdown
        LDA keypressold
        CMP #64
        BNE afterkeycheckhelp
        DEC numloops
        LDA numloops
        PrintHex 4253,4254
        JMP afterkeycheck

afterkeycheckhelp
        JMP afterkeycheck

loophelp
        DEC numloops
        LDA numloops
        DEC CURRENTSONG
        PrintHex 4253,4254
        LDA LoopPoint
        STA patterncounter
        JMP newpatternreq

decexit
        DEC CURRENTSONG
        DEC CURRENTSONG
incexit
        INC CURRENTSONG

exit    
        LDA #0
        CMP numloops
        BNE loophelp
        STA patterncounter
        STA VOLUME
        STA HASPLAYED
        LDA #147
        JSR PRINT_CHAR
        LDA #27
        STA 36879
        LDA #64
        STA 37150  ; shut down 10-bit-ofr oscillator code, since it stops the VIC from loading new programs
        RTS

LoadToneLow
        LDA 60900
        CMP #12 ; 5=NTSC, 12=PAL
        BEQ LoadToneLowPAL
        LDA NTSCToneLowByte,x
        RTS
LoadToneLowPAL
        LDA PALToneLowByte,x
        RTS

LoadToneHigh
        LDA 60900
        CMP #12 ; 5=NTSC, 12=PAL
        BEQ LoadToneHighPAL
        LDA NTSCToneHighByte,x
        RTS
LoadToneHighPAL
        LDA PALToneHighByte,x
        RTS

;print header info
hprint  LDA sstring,X
        CMP #36
        BEQ hexit
        JSR PRINT_CHAR
        INX
        JMP hprint
hexit   LDX #0
        RTS


fadeout
        LDA numloops
        CMP #0
        BNE fadetesthelp
        LDA patterncounter
        CMP fadeouttime
        BCS decreasevolume
        JMP fadetest
decreasevolume

        DEC 36878
        LDA #0
        CMP 36878
        BEQ clearloops
        JMP fadetest
fadetesthelp
        JMP fadetest
clearloops
        LDA #0
        STA numloops
        JMP incexit

incaddr
       LDA #0
       STA $AC
       INC $AD
       RTS

pwmcheck
       LDA #0
       CMP pwmval
       BEQ pwmon
       

pwmoff
      ;LDA #0
      LDA n4tonelow
      STA n4
      STA pwmval 
      JMP pwmdone

pwmon 
        LDA n4tonelow
        STA n4
        LDA #1
        STA pwmval

pwmdone
        RTS



PRINT_CHAR = $FFD2

S11=248
S21=249
S31=250
S12=251
S22=252
S32=253
N4=36877

CURRENTSONG=950
HASPLAYED=951


AddrLow=$AC
AddrHigh=$AD

FrameCountHigh  byte 0
FrameCountLow   byte 0

pwmval  byte 0

convtable    byte $30,$31,$32,$33,$34,$35,$36,$37
      byte $38,$39,$01,$02,$03,$04,$05,$06 

s1string        null 'S1'
                byte 61
                byte 0
s2string        null 'S2'
                byte 61
                byte 0
s3string        null 'S3'
                byte 61
                byte 0


BackgroundColor  byte 0
ByteOne                 byte 0

sounddelaylowbyte   byte 0
sounddelayhighbyte  byte 0

framecount     byte 0
framestate    byte 0
keypressold     byte 0

totalframecount byte 0

s3request       byte 0
s3notepos       byte 0
s3tonelow       byte 0
s3tonehigh      byte 0
s3duration      byte 0
s3loopcount     byte 0
s3addrhigh      byte 0
s3addrlow       byte 0

s2request       byte 0
s2notepos       byte 0
s2tonelow       byte 0
s2tonehigh      byte 0
s2duration      byte 0
s2loopcount     byte 0
s2addrhigh      byte 0
s2addrlow       byte 0

s1request       byte 0
s1notepos       byte 0
s1tonelow       byte 0
s1tonehigh      byte 0
s1duration      byte 0
s1loopcount     byte 0
s1addrhigh      byte 0
s1addrlow       byte 0

n4request       byte 0
n4notepos       byte 0
n4tonelow       byte 0
n4tonehigh      byte 0
n4duration      byte 0
n4loopcount     byte 0
n4addrhigh      byte 0
n4addrlow       byte 0

numloops        byte 0

patterncounter  byte 0

VOLUME=36878

Tempo   byte 0
TempoConst      byte 0
NTSCSpeed       byte 146 ;64 w/ PWM, 
PALSpeed        byte 160 ;73

SpeedHighByte   byte 1

;PAL Tones
PALToneLowByte     byte 0,130,137,143,149,155,161,166,171,176,180,184,188,192,196,199,202,205,208,210,213,215,217,220,221,223,225,227,228,230,231,232,234,235,236,237,238,239,240,241,241,242,243,244,244,245,245,246,246,247,247,248,248,248,249,249,249,250,250,250,250,251,251,251,251,251,252,252,252,252,252,252,0,0,0,0,0,0,0,0,0,0,0,0,0
PALToneHighByte    byte 0,0,1,6,7,7,3,5,5,2,6,7,7,4,0,3,4,3,2,7,2,5,7,0,7,6,4,1,6,2,5,7,1,3,3,4,4,3,2,1,7,5,2,0,5,1,6,2,6,2,5,0,3,6,1,4,6,1,3,5,7,1,3,4,6,7,1,2,3,4,5,6

;NTSC Tones
NTSCToneLowByte     byte 132,139,146,152,158,163,168,173,178,182,186,190,193,197,200,203,206,209,211,214,216,218,220,222,224,226,227,229,230,232,233,234,235,236,237,238,239,240,241,242,242,243,244,244,245,245,246,246,247,247,248,248,249,249,249,249,250,250,250,251,251,251,251,251,252,252,252,252,252,252,252,253,0,0,0,0,0,0,0,0,0,0,0,0,0
NTSCToneHighByte    byte 7,6,1,2,0,4,5,4,0,3,4,2,7,3,5,5,4,2,6,2,4,5,6,5,4,1,6,3,6,1,3,5,6,7,7,7,6,5,3,1,7,4,2,6,3,7,3,7,3,6,2,5,0,2,5,7,2,4,6,0,1,3,5,6,0,1,2,4,5,6,7,0,0

10bitofr        byte    169,99,141,24,3,169,3,141,25,3,169,128,141,20,145,133,254,162,5,142,21,145,169
                byte    0,149,248,202,16,251,169,192,141,30,145,96,72,152,72,138,72,6,254,144,2,230,254
                byte    162,2,180,251,185,140,3,180,248,37,254,240,1,200,152,157,10,144,202,16,237,104
                byte    170,104,168,104,44,20,145,64,0,128,136,146,170,218,238,254


;print S1=, S2=, S3=, N4=, P=, L=
sstring byte 147,13,13,83,49,61,32,32,46,32,32,13, 83,50,61,32,32,46,32,32,13, 83,51,61,32,32,46,32,32,13, 78,52,61,32,32,13, 32,80,61,32,32,13, 32,76,61,32,32,13,13
        null 'ARTIST'
        byte 13
        null 'SONG TITLE'
        byte 13
;terminate string printing routine
        byte 36

frameinterval           byte 48        
fadeouttime             byte 0
numloopsconst           byte 3



; auto generated script data goes here


